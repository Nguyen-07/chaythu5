#include <stdint.h>
#include <stm32f401re_gpio.h>
#include <stm32f401re_rcc.h>

#define GPIO_PIN_SET   1
#define GPIO_PIN_RESET 0
#define GPIO_PIN_LOW   0
#define GPIO_PIN_HIGH  1

#define BUZZER_GPIO_PORT        GPIOC
#define BUZZER_GPIO_PIN         GPIO_Pin_9
#define BUZZER_PIN9             9
#define BUZZERControl_SetClock  RCC_AHB1Periph_GPIOC

#define BUTTON_GPIO_PORT        GPIOB
#define BUTTON_GPIO_PIN         GPIO_Pin_4
#define BUTTON_B5_PIN           4
#define BUTTONControl_SetClock  RCC_AHB1Periph_GPIOB

static void Buzzer_Init(void)
{
    GPIO_InitTypeDef GPIO_InitStructure;

    // Enable clock for GPIOC
    RCC_AHB1PeriphClockCmd(BUZZERControl_SetClock, ENABLE);

    // Configure GPIOC Pin 9
    GPIO_InitStructure.GPIO_Pin   = BUZZER_GPIO_PIN;
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_DOWN;

    // Initialize the GPIO with the configuration
    GPIO_Init(BUZZER_GPIO_PORT, &GPIO_InitStructure);
}

static void Button_Init(void)
{
    GPIO_InitTypeDef GPIO_InitStructure;

    RCC_AHB1PeriphClockCmd(BUTTONControl_SetClock, ENABLE);

    GPIO_InitStructure.GPIO_Pin   = BUTTON_GPIO_PIN;
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;

    GPIO_Init(BUTTON_GPIO_PORT, &GPIO_InitStructure);
}

// Điều khiển trạng thái của buzzer (SET hoặc RESET)
static void BuzzerControl_SetStatus(GPIO_TypeDef * GPIOx, uint8_t GPIO_PIN, uint8_t Status)
{
    // Set bit in BSRR register (bật buzzer)
    if (Status == GPIO_PIN_SET)
    {
        GPIOx->BSRRL |= (1 << GPIO_PIN);
    }
    // Reset bit in BSRR register (tắt buzzer)
    if (Status == GPIO_PIN_RESET)
    {
        GPIOx->BSRRH |= (1 << GPIO_PIN);
    }
}

// Đọc trạng thái của nút nhấn từ thanh ghi IDR
static uint8_t ButtonRead_Status(GPIO_TypeDef * GPIOx, uint32_t GPIO_PIN)
{
    uint32_t Read_Pin;

    // Đọc bit tại vị trí GPIO_PIN trong thanh ghi IDR
    Read_Pin = (GPIOx->IDR) >> GPIO_PIN;
    Read_Pin = Read_Pin & 0x01;

    return (uint8_t)Read_Pin;
}
